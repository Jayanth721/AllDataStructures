INDEX:
1. BINARY TREE
2. TREAP
3. BINARY SEARCH TREE
4. AVL TREES
5. BINARY HEAP
6. SKIP LISTS
7.

---------------------------------------------------------------------------------------------------

BINARY TREE:

Node:

struct node 
{
  int data;
  struct node *left;
  struct node *right;
};

New node:

struct node* newNode(int key)
{
    struct node* temp = new Node;
    temp->key = key;
    temp->left = temp->right = NULL;
    return temp;
};

Insertion:

/*function to insert element in binary tree */
void insert(struct Node* temp, int key)
{
    queue<struct Node*> q;
    q.push(temp);
 
    // Do level order traversal until we find
    // an empty place. 
    while (!q.empty()) {
        struct Node* temp = q.front();
        q.pop();
 
        if (!temp->left) {
            temp->left = newNode(key);
            break;
        } else
            q.push(temp->left);
 
        if (!temp->right) {
            temp->right = newNode(key);
            break;
        } else
            q.push(temp->right);
    }
}

Deletion:

-> Replace the node to be deleted with deepest node(last node) and remove it.

/* function to delete the given deepest node
   (d_node) in binary tree */
void deletDeepest(struct Node *root,
                  struct Node *d_node)
{
    queue<struct Node*> q;
    q.push(root);
 
    // Do level order traversal until last node
    struct Node* temp;
    while(!q.empty())
    {
        temp = q.front();
        q.pop();
 
        if (temp->right)
        {
            if (temp->right == d_node)
            {
                temp->right = NULL;
                delete(d_node);
                return;
            }
            else
                q.push(temp->right);
        }
 
        if (temp->left)
        {
            if (temp->left == d_node)
            {
                temp->left=NULL;
                delete(d_node);
                return;
            }
            else
                q.push(temp->left);
        }
    }
}

/* function to delete element in binary tree */
void deletion(struct Node* root, int key)
{
    queue<struct Node*> q;
    q.push(root);
 
    struct Node *temp;
    struct Node *key_node = NULL;
 
    // Do level order traversal to find deepest
    // node(temp) and node to be deleted (key_node)
    while (!q.empty())
    {
        temp = q.front();
        q.pop();
 
        if (temp->key == key)
            key_node = temp;
 
        if (temp->left)
            q.push(temp->left);
 
        if (temp->right)
            q.push(temp->right);
    }
 
    int x = temp->key;
    deletDeepest(root, temp);
    key_node->key = x;
}

Search:

// An iterative process to search an element x in a given binary tree
bool iterativeSearch(node *root, int x)
{
    // Base Case
    if (root == NULL)
        return false;
 
    // Create an empty queue for level order traversal
    queue<node *> q;
 
    // Enqueue Root and initialize height
    q.push(root);
 
    // Queue based level order traversal
    while (q.empty() == false)
    {
        // See if current node is same as x
        node *node = q.front();
        if (node->data == x)
            return true;
 
        // Remove current node and enqueue its children
        q.pop();
        if (node->left != NULL)
            q.push(node->left);
        if (node->right != NULL)
            q.push(node->right);
    }
 
    return false;
}

//To delete all the leaves with value x

Node* deleteLeaves(Node* root, int x) 
{ 
    if (root == NULL) 
        return NULL; 
    root->left = deleteLeaves(root->left, x); 
    root->right = deleteLeaves(root->right, x); 
  
    if (root->data == x && root->left == NULL &&  
                          root->right == NULL) { 
        delete(root); 
        return NULL; 
    } 
    return root; 
} 

Properties:

Handshaking lemma is about undirected graph. In every finite undirected graph number of vertices with odd degree is always even. The handshaking lemma is a consequence of the degree sum formula (also sometimes called the handshaking lemma)
 Sum of degrees of all vertices = 2 * |E|
 
Links for practice problems:
https://www.geeksforgeeks.org/binary-tree-data-structure/

====================================================================================================================================================
 
 TREAP:
 
// A Treap Node
struct TreapNode
{
    int data;
    int priority;
    TreapNode* left, *right;

    // Constructor
    TreapNode(int data)
    {
        this->data = data;
        this->priority = rand() % 100;
        this->left = this->right = nullptr;
    }
};

/* Function to left rotate given Treap

      r                         R
     / \      Left Rotate      / \
    L   R      –------->      r   Y
       / \                   / \
      X   Y                 L   X
*/

void rotateLeft(TreapNode* &root)
{
    TreapNode* R = root->right;
    TreapNode* X = root->right->left;

    // rotate
    R->left = root;
    root->right = X;

    // set new root
    root = R;
}

/* Function to right rotate given Treap

        r                        L
       / \     Right Rotate     / \
      L   R     –-------->     X   r
     / \                          / \
    X   Y                        Y   R
*/

void rotateRight(TreapNode* &root)
{
    TreapNode* L = root->left;
    TreapNode* Y = root->left->right;

    // rotate
    L->right = root;
    root->left = Y;

    // set new root
    root = L;
}

// Recursive function to insert a given key with a priority into Treap
// using a reference parameter
void insertNode(TreapNode* &root, int data)
{
    // base case
    if (root == nullptr)
    {
        root = new TreapNode(data);
        return;
    }

    // if given data is less than the root node, insert in the left subtree
    // else insert in the right subtree
    if (data < root->data)
    {
        insertNode(root->left, data);

        // rotate right if heap property is violated
        if (root->left != nullptr && root->left->priority > root->priority)
            rotateRight(root);
    }
    else
    {
        insertNode(root->right, data);

        // rotate left if heap property is violated
        if (root->right != nullptr && root->right->priority > root->priority)
            rotateLeft(root);
    }
}

// Recursive function to search for an key in the given Treap
bool searchNode(TreapNode* root, int key)
{
    // if key is not present in the key
    if (root == nullptr)
        return false;

    // if key is found
    if (root->data == key)
        return true;

    // if given key is less than the root node, search in the left subtree
    if (key < root->data)
        return searchNode(root->left, key);

    // else search in the right subtree
    return searchNode(root->right, key);
}

// Recursive function to delete an key from the given Treap
void deleteNode(TreapNode* &root, int key)
{
    // base case: key not found in tree
    if (root == nullptr)
        return;

    // if given key is less than the root node, recuse for left subtree
    if (key < root->data)
        deleteNode(root->left, key);

    // if given key is more than the root node, recuse for right subtree
    else if (key > root->data)
        deleteNode(root->right, key);

    // if key found
    else
    {
        // Case 1: node to be deleted has no children (it is a leaf node)
        if (root->left == nullptr && root->right == nullptr)
        {
            // deallocate the memory and update root to null
            delete root;
            root = nullptr;
        }

        // Case 2: node to be deleted has two children
        else if (root->left && root->right)
        {
            // if left child has less priority than right child
            if (root->left->priority < root->right->priority)
            {
                // call rotateLeft on root
                rotateLeft(root);

                // recursively delete the left child
                deleteNode(root->left, key);
            }
            else
            {
                // call rotateRight on root
                rotateRight(root);

                // recursively delete the right child
                deleteNode(root->right, key);
            }
        }

        // Case 3: node to be deleted has only one child
        else
        {
            // find child node
            TreapNode* child = (root->left)? root->left: root->right;
            TreapNode* curr = root;

            root = child;

            // deallocate the memory
            delete curr;
        }
    }
}

// Utility function to print two-dimensional view of a Treap using
// reverse inorder traversal
void printTreap(TreapNode *root, int space = 0, int height = 10)
{
    // Base case
    if (root == nullptr)
        return;

    // increase distance between levels
    space += height;

    // print right child first
    printTreap(root->right, space);
    cout << endl;

    // print current node after padding with spaces
    for (int i = height; i < space; i++)
        cout << ' ';
    cout << root->data << "(" << root->priority << ")\n";

    // print left child
    cout << endl;
    printTreap(root->left, space);
}

====================================================================================================================================================

BINARY SEARCH TREE:

Binary Search Tree is a node-based binary tree data structure which has the following properties:

* The left subtree of a node contains only nodes with keys lesser than the node’s key.
* The right subtree of a node contains only nodes with keys greater than the node’s key.
* The left and right subtree each must also be a binary search tree.

Node:

struct node 
{ 
    int key; 
    struct node *left, *right; 
};

// A utility function to create a new BST node 
struct node* newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->key = item; 
    temp->left = temp->right = NULL; 
    return temp; 
}

/* A utility function to insert a new node with given key in BST */
struct node* insert(struct node* root, int key) 
{ 
    /* If the tree is empty, return a new node */
    if (root == NULL) return newNode(key); 
  
    /* Otherwise, recur down the tree */
    if (key < root->key) 
        root->left  = insert(root->left, key); 
    else if (key > root->key) 
        root->right = insert(root->right, key);    
  
    /* return the (unchanged) root pointer */
    return node; 
} 

// C function to search a given key in a given BST 
struct node* search(struct node* root, int key) 
{ 
    // Base Cases: root is null or key is present at root 
    if (root == NULL || root->key == key) 
       return root; 
     
    // Key is greater than root's key 
    if (root->key < key) 
       return search(root->right, key); 
  
    // Key is smaller than root's key 
    return search(root->left, key); 
}

/* Given a non-empty binary search tree, return the node with minimum 
   key value found in that tree. Note that the entire tree does not 
   need to be searched. */
struct node * minValueNode(struct node* node) 
{ 
    struct node* current = node; 
  
    /* loop down to find the leftmost leaf */
    while (current->left != NULL) 
        current = current->left; 
  
    return current; 
}

/* Given a binary search tree and a key, this function deletes the key 
   and returns the new root */
struct node* deleteNode(struct node* root, int key) 
{ 
    // base case 
    if (root == NULL) return root; 
  
    // If the key to be deleted is smaller than the root's key, 
    // then it lies in left subtree 
    if (key < root->key) 
        root->left = deleteNode(root->left, key); 
  
    // If the key to be deleted is greater than the root's key, 
    // then it lies in right subtree 
    else if (key > root->key) 
        root->right = deleteNode(root->right, key); 
  
    // if key is same as root's key, then This is the node 
    // to be deleted 
    else
    { 
        // node with only one child or no child 
        if (root->left == NULL) 
        { 
            struct node *temp = root->right; 
            free(root); 
            return temp; 
        } 
        else if (root->right == NULL) 
        { 
            struct node *temp = root->left; 
            free(root); 
            return temp; 
        } 
  
        // node with two children: Get the inorder successor (smallest 
        // in the right subtree) 
        struct node* temp = minValueNode(root->right); 
  
        // Copy the inorder successor's content to this node 
        root->key = temp->key; 
  
        // Delete the inorder successor 
        root->right = deleteNode(root->right, temp->key); 
    } 
    return root; 
} 

Optimized delete in BST:

Node* deleteNode(Node* root, int k) 
{ 
    // Base case 
    if (root == NULL) 
        return root; 
  
    // Recursive calls for ancestors of 
    // node to be deleted 
    if (root->key > k) { 
        root->left = deleteNode(root->left, k); 
        return root; 
    } 
    else if (root->key < k) { 
        root->right = deleteNode(root->right, k); 
        return root; 
    } 
  
    // We reach here when root is the node 
    // to be deleted. 
  
    // If one of the children is empty 
    if (root->left == NULL) { 
        Node* temp = root->right; 
        delete root; 
        return temp; 
    } 
    else if (root->right == NULL) { 
        Node* temp = root->left; 
        delete root; 
        return temp; 
    } 
  
    // If both children exist 
    else { 
  
        Node* succParent = root->right; 
          
        // Find successor 
        Node *succ = root->right; 
        while (succ->left != NULL) { 
            succParent = succ; 
            succ = succ->left; 
        } 
  
        // Delete successor.  Since successor 
        // is always left child of its parent 
        // we can safely make successor's right 
        // right child as left of its parent. 
        succParent->left = succ->right; 
  
        // Copy Successor Data to root 
        root->key = succ->key; 
  
        // Delete Successor and return root 
        delete succ;          
        return root; 
    } 
}

====================================================================================================================================================
AVL TREES:

// An AVL tree node 
struct Node 
{ 
    int key; 
    struct Node *left; 
    struct Node *right; 
    int height; 
};

// A utility function to get maximum of two integers 
int max(int a, int b); 
  
// A utility function to get the height of the tree 
int height(struct Node *N) 
{ 
    if (N == NULL) 
        return 0; 
    return N->height; 
} 
  
// A utility function to get maximum of two integers 
int max(int a, int b) 
{ 
    return (a > b)? a : b; 
} 
  
/* Helper function that allocates a new node with the given key and 
    NULL left and right pointers. */
struct Node* newNode(int key) 
{ 
    struct Node* node = (struct Node*) 
                        malloc(sizeof(struct Node)); 
    node->key   = key; 
    node->left   = NULL; 
    node->right  = NULL; 
    node->height = 1;  // new node is initially added at leaf 
    return(node); 
} 

// A utility function to right rotate subtree rooted with y 
// See the diagram given above. 
struct Node *rightRotate(struct Node *y) 
{ 
    struct Node *x = y->left; 
    struct Node *T2 = x->right; 
  
    // Perform rotation 
    x->right = y; 
    y->left = T2; 
  
    // Update heights 
    y->height = max(height(y->left), height(y->right))+1; 
    x->height = max(height(x->left), height(x->right))+1; 
  
    // Return new root 
    return x; 
} 
  
// A utility function to left rotate subtree rooted with x 
// See the diagram given above. 
struct Node *leftRotate(struct Node *x) 
{ 
    struct Node *y = x->right; 
    struct Node *T2 = y->left; 
  
    // Perform rotation 
    y->left = x; 
    x->right = T2; 
  
    //  Update heights 
    x->height = max(height(x->left), height(x->right))+1; 
    y->height = max(height(y->left), height(y->right))+1; 
  
    // Return new root 
    return y; 
} 
  
// Get Balance factor of node N 
int getBalance(struct Node *N) 
{ 
    if (N == NULL) 
        return 0; 
    return height(N->left) - height(N->right); 
} 
  
// Recursive function to insert a key in the subtree rooted 
// with node and returns the new root of the subtree. 
struct Node* insert(struct Node* node, int key) 
{ 
    /* 1.  Perform the normal BST insertion */
    if (node == NULL) 
        return(newNode(key)); 
  
    if (key < node->key) 
        node->left  = insert(node->left, key); 
    else if (key > node->key) 
        node->right = insert(node->right, key); 
    else // Equal keys are not allowed in BST 
        return node; 
  
    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left), 
                           height(node->right)); 
  
    /* 3. Get the balance factor of this ancestor 
          node to check whether this node became 
          unbalanced */
    int balance = getBalance(node); 
  
    // If this node becomes unbalanced, then 
    // there are 4 cases 
  
    // Left Left Case 
    if (balance > 1 && key < node->left->key) 
        return rightRotate(node); 
  
    // Right Right Case 
    if (balance < -1 && key > node->right->key) 
        return leftRotate(node); 
  
    // Left Right Case 
    if (balance > 1 && key > node->left->key) 
    { 
        node->left =  leftRotate(node->left); 
        return rightRotate(node); 
    } 
  
    // Right Left Case 
    if (balance < -1 && key < node->right->key) 
    { 
        node->right = rightRotate(node->right); 
        return leftRotate(node); 
    } 
  
    /* return the (unchanged) node pointer */
    return node; 
} 

// Recursive function to delete a node with given key 
// from subtree with given root. It returns root of 
// the modified subtree. 
struct Node* deleteNode(struct Node* root, int key) 
{ 
    // STEP 1: PERFORM STANDARD BST DELETE 
  
    if (root == NULL) 
        return root; 
  
    // If the key to be deleted is smaller than the 
    // root's key, then it lies in left subtree 
    if ( key < root->key ) 
        root->left = deleteNode(root->left, key); 
  
    // If the key to be deleted is greater than the 
    // root's key, then it lies in right subtree 
    else if( key > root->key ) 
        root->right = deleteNode(root->right, key); 
  
    // if key is same as root's key, then This is 
    // the node to be deleted 
    else
    { 
        // node with only one child or no child 
        if( (root->left == NULL) || (root->right == NULL) ) 
        { 
            struct Node *temp = root->left ? root->left : 
                                             root->right; 
  
            // No child case 
            if (temp == NULL) 
            { 
                temp = root; 
                root = NULL; 
            } 
            else // One child case 
             *root = *temp; // Copy the contents of 
                            // the non-empty child 
            free(temp); 
        } 
        else
        { 
            // node with two children: Get the inorder 
            // successor (smallest in the right subtree) 
            struct Node* temp = minValueNode(root->right); 
  
            // Copy the inorder successor's data to this node 
            root->key = temp->key; 
  
            // Delete the inorder successor 
            root->right = deleteNode(root->right, temp->key); 
        } 
    } 
  
    // If the tree had only one node then return 
    if (root == NULL) 
      return root; 
  
    // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE 
    root->height = 1 + max(height(root->left), 
                           height(root->right)); 
  
    // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to 
    // check whether this node became unbalanced) 
    int balance = getBalance(root); 
  
    // If this node becomes unbalanced, then there are 4 cases 
  
    // Left Left Case 
    if (balance > 1 && getBalance(root->left) >= 0) 
        return rightRotate(root); 
  
    // Left Right Case 
    if (balance > 1 && getBalance(root->left) < 0) 
    { 
        root->left =  leftRotate(root->left); 
        return rightRotate(root); 
    } 
  
    // Right Right Case 
    if (balance < -1 && getBalance(root->right) <= 0) 
        return leftRotate(root); 
  
    // Right Left Case 
    if (balance < -1 && getBalance(root->right) > 0) 
    { 
        root->right = rightRotate(root->right); 
        return leftRotate(root); 
    } 
  
    return root; 
}

=======================================================================================================================

BINARY HEAP:

// A class for Min Heap 
class MinHeap 
{ 
    int *harr; // pointer to array of elements in heap 
    int capacity; // maximum possible size of min heap 
    int heap_size; // Current number of elements in min heap 
public: 
    // Constructor 
    MinHeap(int capacity); 
  
    // to heapify a subtree with the root at given index 
    void MinHeapify(int ); 
  
    int parent(int i) { return (i-1)/2; } 
  
    // to get index of left child of node at index i 
    int left(int i) { return (2*i + 1); } 
  
    // to get index of right child of node at index i 
    int right(int i) { return (2*i + 2); } 
  
    // to extract the root which is the minimum element 
    int extractMin(); 
  
    // Decreases key value of key at index i to new_val 
    void decreaseKey(int i, int new_val); 
  
    // Returns the minimum key (key at root) from min heap 
    int getMin() { return harr[0]; } 
  
    // Deletes a key stored at index i 
    void deleteKey(int i); 
  
    // Inserts a new key 'k' 
    void insertKey(int k); 
}; 

// Inserts a new key 'k' 
void MinHeap::insertKey(int k) 
{ 
    if (heap_size == capacity) 
    { 
        cout << "\nOverflow: Could not insertKey\n"; 
        return; 
    } 
  
    // First insert the new key at the end 
    heap_size++; 
    int i = heap_size - 1; 
    harr[i] = k; 
  
    // Fix the min heap property if it is violated 
    while (i != 0 && harr[parent(i)] > harr[i]) 
    { 
       swap(&harr[i], &harr[parent(i)]); 
       i = parent(i); 
    } 
} 
  
// Decreases value of key at index 'i' to new_val.  It is assumed that 
// new_val is smaller than harr[i]. 
void MinHeap::decreaseKey(int i, int new_val) 
{ 
    harr[i] = new_val; 
    while (i != 0 && harr[parent(i)] > harr[i]) 
    { 
       swap(&harr[i], &harr[parent(i)]); 
       i = parent(i); 
    } 
} 
  
// Method to remove minimum element (or root) from min heap 
int MinHeap::extractMin() 
{ 
    if (heap_size <= 0) 
        return INT_MAX; 
    if (heap_size == 1) 
    { 
        heap_size--; 
        return harr[0]; 
    } 
  
    // Store the minimum value, and remove it from heap 
    int root = harr[0]; 
    harr[0] = harr[heap_size-1]; 
    heap_size--; 
    MinHeapify(0); 
  
    return root; 
} 
  
  
// This function deletes key at index i. It first reduced value to minus 
// infinite, then calls extractMin() 
void MinHeap::deleteKey(int i) 
{ 
    decreaseKey(i, INT_MIN); 
    extractMin(); 
} 
  
// A recursive method to heapify a subtree with the root at given index 
// This method assumes that the subtrees are already heapified 
void MinHeap::MinHeapify(int i) 
{ 
    int l = left(i); 
    int r = right(i); 
    int smallest = i; 
    if (l < heap_size && harr[l] < harr[i]) 
        smallest = l; 
    if (r < heap_size && harr[r] < harr[smallest]) 
        smallest = r; 
    if (smallest != i) 
    { 
        swap(&harr[i], &harr[smallest]); 
        MinHeapify(smallest); 
    } 
}

=======================================================================================================================

SKIP LISTS:

1. SkiplistSSet

struct Node
{
  T x;
  int height;
  Node *next[];
};

Node* findPredNode(T x)
{
  Node *u = sentinal;
  int r = h; //height of the skiplist
  
  while (r >= 0)
  {
    while (u->next[r] != NULL && compare(u->next[r]->x, x) < 0) //while we are smaller than x.
    {
      u = u->next[r]; //go right in list r
    }
    r--; //go down into list r-1
  }
  return u;
}

T find(T x)
{
  Node *u = findPredNode(x);
  return u->next[0] == NULL ? NULL:u->next[0]->x;
}

int pickHeight()
{
  int z = rand();
  int k = 0;
  int m = 1;
  while((z & m))
  {
    k++;
    m <<= 1;
  }
  return k;
}

bool add(T x)
{
  Node *u = sentinal;
  int r = h;
  int comp = 0;
  while(r>=0)
  {
    while(u->next[r] != NULL && (comp = compare(u->next[r]->x, x)) < 0)
    {
      u = u->next[r];
    }
    if(u->next[r] != NULL && comp == 0)
    {
      return false; // Item already exist
    }
    stack[r--] = u; //going down, store u
  }
  Node *w = newNode(x, pickHeight());
  while(h < w->height)
  {
    stack[++h] = sentinal; //height increased
  }
  
  for(int i=0; i <= w->height; ++i)
  {
    w->next[i] = stack[i]->next[i];
    stack[i]->next = w;
  }
  n++;
  return true;
}

bool remove(T x)
{
  bool removed = false;
  Node *u=sentinal, *del;
  int comp=0;
  while(r>=0)
  {
    while(u->next[r] != NULL && (comp=compare(u->next[r]->x, x)) < 0)
    {
      u =u->next[r];
    }
    
    if (u->next[r] != NULL && comp == 0)
    {
      //found one of the prev node which is connected to node to be deleted
      removed = true;
      del = u->next[r];
      u->next[r] = u->next[r]->next[r];
      if (u==sentinal && u->next[r]==NULL)
      {
        h--; //skiplist height has gone down
      }
    }
    r--;
  }
  if(removed)
  {
    delete del;
    n--;
  }
  return removed;
}
