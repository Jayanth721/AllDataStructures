BINARY TREE:

Node:

struct node 
{
  int data;
  struct node *left;
  struct node *right;
};

New node:

struct node* newNode(int key)
{
    struct node* temp = new Node;
    temp->key = key;
    temp->left = temp->right = NULL;
    return temp;
};

Insertion:

/*function to insert element in binary tree */
void insert(struct Node* temp, int key)
{
    queue<struct Node*> q;
    q.push(temp);
 
    // Do level order traversal until we find
    // an empty place. 
    while (!q.empty()) {
        struct Node* temp = q.front();
        q.pop();
 
        if (!temp->left) {
            temp->left = newNode(key);
            break;
        } else
            q.push(temp->left);
 
        if (!temp->right) {
            temp->right = newNode(key);
            break;
        } else
            q.push(temp->right);
    }
}

Deletion:

-> Replace the node to be deleted with deepest node(last node) and remove it.

/* function to delete the given deepest node
   (d_node) in binary tree */
void deletDeepest(struct Node *root,
                  struct Node *d_node)
{
    queue<struct Node*> q;
    q.push(root);
 
    // Do level order traversal until last node
    struct Node* temp;
    while(!q.empty())
    {
        temp = q.front();
        q.pop();
 
        if (temp->right)
        {
            if (temp->right == d_node)
            {
                temp->right = NULL;
                delete(d_node);
                return;
            }
            else
                q.push(temp->right);
        }
 
        if (temp->left)
        {
            if (temp->left == d_node)
            {
                temp->left=NULL;
                delete(d_node);
                return;
            }
            else
                q.push(temp->left);
        }
    }
}

/* function to delete element in binary tree */
void deletion(struct Node* root, int key)
{
    queue<struct Node*> q;
    q.push(root);
 
    struct Node *temp;
    struct Node *key_node = NULL;
 
    // Do level order traversal to find deepest
    // node(temp) and node to be deleted (key_node)
    while (!q.empty())
    {
        temp = q.front();
        q.pop();
 
        if (temp->key == key)
            key_node = temp;
 
        if (temp->left)
            q.push(temp->left);
 
        if (temp->right)
            q.push(temp->right);
    }
 
    int x = temp->key;
    deletDeepest(root, temp);
    key_node->key = x;
}

Search:

// An iterative process to search an element x in a given binary tree
bool iterativeSearch(node *root, int x)
{
    // Base Case
    if (root == NULL)
        return false;
 
    // Create an empty queue for level order traversal
    queue<node *> q;
 
    // Enqueue Root and initialize height
    q.push(root);
 
    // Queue based level order traversal
    while (q.empty() == false)
    {
        // See if current node is same as x
        node *node = q.front();
        if (node->data == x)
            return true;
 
        // Remove current node and enqueue its children
        q.pop();
        if (node->left != NULL)
            q.push(node->left);
        if (node->right != NULL)
            q.push(node->right);
    }
 
    return false;
}

//To delete all the leaves with value x

Node* deleteLeaves(Node* root, int x) 
{ 
    if (root == NULL) 
        return NULL; 
    root->left = deleteLeaves(root->left, x); 
    root->right = deleteLeaves(root->right, x); 
  
    if (root->data == x && root->left == NULL &&  
                          root->right == NULL) { 
        delete(root); 
        return NULL; 
    } 
    return root; 
} 

Properties:

Handshaking lemma is about undirected graph. In every finite undirected graph number of vertices with odd degree is always even. The handshaking lemma is a consequence of the degree sum formula (also sometimes called the handshaking lemma)
 Sum of degrees of all vertices = 2 * |E|
 
Links for practice problems:
https://www.geeksforgeeks.org/binary-tree-data-structure/

====================================================================================================================================================
 
 TREAP:
 
// A Treap Node
struct TreapNode
{
    int data;
    int priority;
    TreapNode* left, *right;

    // Constructor
    TreapNode(int data)
    {
        this->data = data;
        this->priority = rand() % 100;
        this->left = this->right = nullptr;
    }
};

/* Function to left rotate given Treap

      r                         R
     / \      Left Rotate      / \
    L   R      –------->      r   Y
       / \                   / \
      X   Y                 L   X
*/

void rotateLeft(TreapNode* &root)
{
    TreapNode* R = root->right;
    TreapNode* X = root->right->left;

    // rotate
    R->left = root;
    root->right = X;

    // set new root
    root = R;
}

/* Function to right rotate given Treap

        r                        L
       / \     Right Rotate     / \
      L   R     –-------->     X   r
     / \                          / \
    X   Y                        Y   R
*/

void rotateRight(TreapNode* &root)
{
    TreapNode* L = root->left;
    TreapNode* Y = root->left->right;

    // rotate
    L->right = root;
    root->left = Y;

    // set new root
    root = L;
}

// Recursive function to insert a given key with a priority into Treap
// using a reference parameter
void insertNode(TreapNode* &root, int data)
{
    // base case
    if (root == nullptr)
    {
        root = new TreapNode(data);
        return;
    }

    // if given data is less than the root node, insert in the left subtree
    // else insert in the right subtree
    if (data < root->data)
    {
        insertNode(root->left, data);

        // rotate right if heap property is violated
        if (root->left != nullptr && root->left->priority > root->priority)
            rotateRight(root);
    }
    else
    {
        insertNode(root->right, data);

        // rotate left if heap property is violated
        if (root->right != nullptr && root->right->priority > root->priority)
            rotateLeft(root);
    }
}

// Recursive function to search for an key in the given Treap
bool searchNode(TreapNode* root, int key)
{
    // if key is not present in the key
    if (root == nullptr)
        return false;

    // if key is found
    if (root->data == key)
        return true;

    // if given key is less than the root node, search in the left subtree
    if (key < root->data)
        return searchNode(root->left, key);

    // else search in the right subtree
    return searchNode(root->right, key);
}

// Recursive function to delete an key from the given Treap
void deleteNode(TreapNode* &root, int key)
{
    // base case: key not found in tree
    if (root == nullptr)
        return;

    // if given key is less than the root node, recuse for left subtree
    if (key < root->data)
        deleteNode(root->left, key);

    // if given key is more than the root node, recuse for right subtree
    else if (key > root->data)
        deleteNode(root->right, key);

    // if key found
    else
    {
        // Case 1: node to be deleted has no children (it is a leaf node)
        if (root->left == nullptr && root->right == nullptr)
        {
            // deallocate the memory and update root to null
            delete root;
            root = nullptr;
        }

        // Case 2: node to be deleted has two children
        else if (root->left && root->right)
        {
            // if left child has less priority than right child
            if (root->left->priority < root->right->priority)
            {
                // call rotateLeft on root
                rotateLeft(root);

                // recursively delete the left child
                deleteNode(root->left, key);
            }
            else
            {
                // call rotateRight on root
                rotateRight(root);

                // recursively delete the right child
                deleteNode(root->right, key);
            }
        }

        // Case 3: node to be deleted has only one child
        else
        {
            // find child node
            TreapNode* child = (root->left)? root->left: root->right;
            TreapNode* curr = root;

            root = child;

            // deallocate the memory
            delete curr;
        }
    }
}

// Utility function to print two-dimensional view of a Treap using
// reverse inorder traversal
void printTreap(TreapNode *root, int space = 0, int height = 10)
{
    // Base case
    if (root == nullptr)
        return;

    // increase distance between levels
    space += height;

    // print right child first
    printTreap(root->right, space);
    cout << endl;

    // print current node after padding with spaces
    for (int i = height; i < space; i++)
        cout << ' ';
    cout << root->data << "(" << root->priority << ")\n";

    // print left child
    cout << endl;
    printTreap(root->left, space);
}

====================================================================================================================================================

BINARY SEARCH TREE:

Binary Search Tree is a node-based binary tree data structure which has the following properties:

* The left subtree of a node contains only nodes with keys lesser than the node’s key.
* The right subtree of a node contains only nodes with keys greater than the node’s key.
* The left and right subtree each must also be a binary search tree.

Node:

struct node 
{ 
    int key; 
    struct node *left, *right; 
};

// A utility function to create a new BST node 
struct node* newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->key = item; 
    temp->left = temp->right = NULL; 
    return temp; 
}

/* A utility function to insert a new node with given key in BST */
struct node* insert(struct node* root, int key) 
{ 
    /* If the tree is empty, return a new node */
    if (root == NULL) return newNode(key); 
  
    /* Otherwise, recur down the tree */
    if (key < root->key) 
        root->left  = insert(root->left, key); 
    else if (key > root->key) 
        root->right = insert(root->right, key);    
  
    /* return the (unchanged) root pointer */
    return node; 
} 

// C function to search a given key in a given BST 
struct node* search(struct node* root, int key) 
{ 
    // Base Cases: root is null or key is present at root 
    if (root == NULL || root->key == key) 
       return root; 
     
    // Key is greater than root's key 
    if (root->key < key) 
       return search(root->right, key); 
  
    // Key is smaller than root's key 
    return search(root->left, key); 
}

/* Given a non-empty binary search tree, return the node with minimum 
   key value found in that tree. Note that the entire tree does not 
   need to be searched. */
struct node * minValueNode(struct node* node) 
{ 
    struct node* current = node; 
  
    /* loop down to find the leftmost leaf */
    while (current->left != NULL) 
        current = current->left; 
  
    return current; 
}

/* Given a binary search tree and a key, this function deletes the key 
   and returns the new root */
struct node* deleteNode(struct node* root, int key) 
{ 
    // base case 
    if (root == NULL) return root; 
  
    // If the key to be deleted is smaller than the root's key, 
    // then it lies in left subtree 
    if (key < root->key) 
        root->left = deleteNode(root->left, key); 
  
    // If the key to be deleted is greater than the root's key, 
    // then it lies in right subtree 
    else if (key > root->key) 
        root->right = deleteNode(root->right, key); 
  
    // if key is same as root's key, then This is the node 
    // to be deleted 
    else
    { 
        // node with only one child or no child 
        if (root->left == NULL) 
        { 
            struct node *temp = root->right; 
            free(root); 
            return temp; 
        } 
        else if (root->right == NULL) 
        { 
            struct node *temp = root->left; 
            free(root); 
            return temp; 
        } 
  
        // node with two children: Get the inorder successor (smallest 
        // in the right subtree) 
        struct node* temp = minValueNode(root->right); 
  
        // Copy the inorder successor's content to this node 
        root->key = temp->key; 
  
        // Delete the inorder successor 
        root->right = deleteNode(root->right, temp->key); 
    } 
    return root; 
} 

